name: Docker Image CI

on:
  repository_dispatch:
    types:
      - trigger-ci

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEFAULT_BASE_IMAGE: debian:bullseye-slim

jobs:
  build-and-push:
    name: Build and push
    strategy:
      matrix:
        base_image:
          - debian:bullseye-slim
          - debian:bullseye
          - ubuntu:latest
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get info
        id: info
        run: |
          echo "repo=$(echo ${GITHUB_REPOSITORY#*/})" >> $GITHUB_OUTPUT
          echo "base_image=$(tr ':' '_' <<< '${{ matrix.base_image }}')" >> $GITHUB_OUTPUT
          echo "default_image=$(tr ':' '_' <<< '${{ env.DEFAULT_BASE_IMAGE }}')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.3.0
        id: buildx
        with:
          install: true
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        if: steps.info.outputs.base_image == steps.info.outputs.default_image
        uses: docker/metadata-action@v4.1.1
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.info.outputs.repo }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=edge,priority=700,value=${{ github.event.client_payload.branch }}
            type=raw,priority=200,value=SHA${{ github.event.client_payload.sha }}
            type=semver,priority=900,pattern={{version}},value=${{ github.event.client_payload.ref }}
            type=match,pattern=master,group=0,value=${{ github.event.inputs.tag }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta2
        if: steps.info.outputs.base_image != steps.info.outputs.default_image
        uses: docker/metadata-action@v4.1.1
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.info.outputs.repo }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,priority=900,value=${{ steps.info.outputs.base_image }}
            type=raw,priority=800,value=${{ steps.info.outputs.base_image }}-latest
            type=raw,priority=500,value=${{ steps.info.outputs.base_image }}-SHA${{ github.event.client_payload.sha }}
            type=raw,priority=400,value=${{ github.event.client_payload.ref }}-${{ steps.info.outputs.base_image }}
            type=raw,priority=300,value=${{ github.event.client_payload.ref }}-${{ steps.info.outputs.base_image }}-SHA${{ github.event.client_payload.sha }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set runtime dependencies
        id: runtime_deps
        run: |
          # libssl
          if [ '${{ matrix.base_image }}' == 'ubuntu:latest' ]; then
            dep=libssl3
          else
            dep=libssl1.1
          fi
          echo "runtime_deps=${dep}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags || steps.meta2.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels || steps.meta2.outputs.labels }}
          build-args: |
            VERSION=${{ github.event.client_payload.ref }}
            PROFILE=${{ github.event.client_payload.profile }}
            UPSTREAM=${{ github.event.client_payload.upstream }}
            BASE_IMAGE=${{ matrix.base_image }}
            RUNTIME_DEPS=${{ env.runtime_deps }}
