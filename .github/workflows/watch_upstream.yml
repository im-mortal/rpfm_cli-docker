name: Get latest upstream version

on:
  schedule:
    - cron:  '0 5,17 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: Force build containers?
        default: "false"
        required: false

env:
  git_name: github-actions[bot]
  git_email: 41898282+github-actions[bot]@users.noreply.github.com
  registry: ghcr.io
  upstream: Frodo45127/rpfm

jobs:
  
  fetch-and-update:
  
    runs-on: ubuntu-latest
    
    steps:
      
      - uses: actions/checkout@v3
        with:
          token: ${{ github.token }}
          fetch-depth: 0
        
      - name: Init
        id: init
        run: |
          echo "repository_name=$(
            echo '${{ github.repository }}' \
            | awk -F '/' '{print $2}'
          )" >> $GITHUB_OUTPUT
          
          git config --global user.name "${{ env.git_name }}"
          git config --global user.email "${{ env.git_email }}"
      
      - name: Get info
        id: facts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          type=$(
            gh api \
              --header 'Accept: application/vnd.github.v3+json' \
              "/users/${{ github.actor }}" \
              --jq '.type'
          )

          case $type in
            User)
              type="users"
              ;;
            Organization)
              type="orgs"
              ;;
          esac

          echo "branch=$(
            gh api \
              "/repos/${{ env.upstream }}" \
              --jq '.default_branch'
          )" >> $GITHUB_OUTPUT
          
          echo "built_tags=$(
            gh api \
              --header 'Accept: application/vnd.github.v3+json' \
              "/${type}/${{ github.repository_owner }}/packages/container/${{ steps.init.outputs.repository_name }}/versions" \
              --jq '[ .[].metadata.container.tags[] | tojson ]'
          )" >> $GITHUB_OUTPUT
      
      - name: Fetch upstream
        id: upstream
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response_releases_latest=$(
            gh api \
            "/repos/${{ env.upstream }}/releases/latest"
          )

          echo "tag=$(
            jq -r '.tag_name' <<< ${response_releases_latest}
          )" >> $GITHUB_OUTPUT
          
          echo "tag_sha=$(
            jq -r '.target_commitish' <<< ${response_releases_latest}
          )" >> $GITHUB_OUTPUT

          echo "sha=$(
            gh api \
              "/repos/${{ env.upstream }}/commits/${{ steps.facts.outputs.branch }}" \
              --jq '.sha'
          )" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          github-token: ${{ github.token }}
          images: ${{ env.registry }}/${{ github.repository }}
          tags: |
            type=semver,priority=900,pattern={{version}},value=${{ steps.upstream.outputs.tag }}
            
      - id: tag
        run: |
          echo "normalized_tag=${{ 
              fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version']
            }}" >> $GITHUB_OUTPUT
          
      - name: Gathered facts
        run: |
          echo "Branch: ${{ steps.facts.outputs.branch }}"
          echo "Latest tag: ${{ steps.upstream.outputs.tag }}"
          echo "Latest tag SHA: ${{ steps.upstream.outputs.tag_sha }}"
          echo "Latest commit SHA: ${{ steps.upstream.outputs.sha }}"
          echo "::group::Existing tags for ghcr.io/${{ github.repository }}"
          echo "$(echo ${{ steps.facts.outputs.built_tags }} | jq -r)"
          echo "::endgroup::"
          echo "Running Build Tag task?"
          echo "${{ ! contains( steps.facts.outputs.built_tags,
            steps.tag.outputs.normalized_tag ) }}"
          echo "Running Build Branch task?"
          echo "${{ ! contains( steps.facts.outputs.built_tags,
            steps.upstream.outputs.sha ) }}"
          
          
      - name: Repository Dispatch â€” Build Tag
        if: github.event.inputs.force_build == 'true' || ! contains( steps.facts.outputs.built_tags, steps.tag.outputs.normalized_tag )
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.BOT_TOKEN }}
          event-type: trigger-ci
          client-payload: >
            {
            "profile": "release",
            "ref": "${{ steps.upstream.outputs.tag }}",
            "sha": "${{ steps.upstream.outputs.tag_sha }}",
            "branch": "${{ steps.facts.outputs.branch }}",
            "upstream": "${{ github.server_url }}/${{ env.upstream }}.git"
            }

      - name: Repository Dispatch - Build Branch
        if: github.event.inputs.force_build == 'true' || ! contains( steps.facts.outputs.built_tags, steps.upstream.outputs.sha )
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.BOT_TOKEN }}
          event-type: trigger-ci
          client-payload: >
            {
            "profile": "debug",
            "ref": "${{ steps.facts.outputs.branch }}",
            "sha": "${{ steps.upstream.outputs.sha }}",
            "branch": "${{ steps.facts.outputs.branch }}",
            "upstream": "${{ github.server_url }}/${{ env.upstream }}.git"
            }
